import { type NextPage } from "next";
import Head from "next/head";
import { LinkSteamModal } from "../components/LinkSteamModal";
import { useStore } from "../store";
import { Header } from "../components/Header";
import { useInventory } from "../hooks/useInventory";
import Image from "next/image";
import { Puff } from "react-loading-icons";
import { ProfileModal } from "../components/ProfileModal";
import Link from "next/link";
import { Inventory } from "../components/Inventory";
import { api } from "../utils/api";
import { toast } from "react-hot-toast";
import { deleteCookie, getCookie } from "cookies-next";
import { useUser } from "../hooks/useUser";

const Home: NextPage = () => {
  const { user, csgoInventory, setUser, setShowSteamLinkModal } = useStore(
    (state) => ({
      user: state.user,
      setUser: state.setUser,
      setShowSteamLinkModal: state.setShowSteamLinkModal,
      csgoInventory: state.csgoInventory,
    })
  );
  const { isLoadingInventory, onRefetchInventory } = useInventory();
  const { authenticate } = useUser();

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const _ = api.user.me.useQuery(
    undefined, // no input
    {
      onSuccess(user) {
        setUser(user);
        if (!user.steamId) {
          setShowSteamLinkModal(true);
        }
      },
      onError(error) {
        // try to sign in again
        if (error.data && error.data.httpStatus === 401) {
          console.log("Signing");
          return authenticate();
        }

        deleteCookie("auth-jwt");
        toast.error(
          "Failed to fetch current user. Refresh the page and try sign in again"
        );
      },
      // on error -> reset auth-jwt cookie
      enabled: !user && !!getCookie("auth-jwt"),
      retry: false,
      refetchOnWindowFocus: false,
    }
  );

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center bg-gradient-to-b from-[#000] to-[#0b0c1d] text-white">
        <Header />

        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <div className="flex flex-col items-center gap-5 sm:flex-row">
            <h1 className="text-3xl font-extrabold tracking-tight text-white sm:text-[3rem]">
              Wrap CSGO skins
            </h1>

            <span className="italic text-gray-400">
              soon available for other games
            </span>

            <button onClick={onRefetchInventory}>refetch</button>
          </div>

          {user && user.steamId && <Inventory csgoInventory={csgoInventory} />}

          {user && isLoadingInventory && (
            <div className="flex items-center justify-center">
              <Puff className="mt-4" />
            </div>
          )}

          {!user && <>sign in to wrap steam skins</>}

          {user && !user.steamId && (
            <Link
              className="mr-1 mb-1 mt-6 flex w-full max-w-xl items-center justify-center gap-6 rounded bg-gray-600 px-6 py-3 text-sm font-bold uppercase text-white shadow outline-none transition-all duration-150 ease-linear hover:bg-gray-700 hover:shadow-lg focus:outline-none active:bg-gray-700"
              href="/api/auth/login"
            >
              <Image
                src="/steam-logo.webp"
                alt="steam-logo"
                width={30}
                height={30}
              />
              Link your steam account to wrap skins into nfts
            </Link>
          )}

          {user && user.steamId && !csgoInventory && !isLoadingInventory && (
            <div>fail to load csgo inventory</div>
          )}

          <LinkSteamModal />

          <ProfileModal />
        </div>
      </main>
    </>
  );
};

export default Home;
